*** BASIC DATA STRUCTURES ***

Use an array to store a collection of data:
  all arrays have a length property that can be accessed with Array.length
  a multi-dimensional array: an array that contains other arrays
  
Access an array's contents using bracket notation:
  array[0] = x ;
  
Add items to an array with push() and unshift():
  push() add at the end of the array:
    array.push(x);
  unshift() adds at the beginning:
    array.unshift(x);
    
Remove titems from an array with pop() and shift():
  pop() removes the last and shift() removes the first element
  
Remove items using splice():
  splice() can take up to 3 parameters: index and number of elements are the first 2
  array.splice(index, nb);
  
Add items using splice:
  array.splice(startIndex, amountToDelete, elmentsReplacing);
  
Copy array items using slice:
  let newArray = array.slice(startIndex, stopIndex);      // stopIndex is not included
  
Copy an array with the spread operator:
  let thatArray = [...thisArray];
  
Combine arrays with the spread operator:
  let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];
 
 Check for the presence of an element with indexOf:
  array.indexOf(element);
  returns the index or -1 if not present
  
Iterate through all an array's items using for loops:
  for(met i=0;i<array.length;i++){
    statements;
  }
  
Create complex multi-dimensional arrays:
   arrays can contain an infinite depth of arrays that can contain other arrays, each with their own arbitrary levels of depth, and so on
   console.log(nestedArray[2][1][0][0][0]);
   
Add key-value paris to javascript objects:
  const tekkenCharacter = {
    player: 'Hwoarang',
    fightingStyle: 'Tae Kwon Doe',
    human: true
  };
  if you want to add an additional property, such as "origin", it can be done by assigning origin to the object:
    tekkenCharacter.origin = 'South Korea';
  bracket notation is required if your property has a space in it or if you want to use a variable to name the property:
    tekkenCharacter['hair color'] = 'dyed orange';
    or:
      const eyes = 'eye color';
      tekkenCharacter[eyes] = 'brown';

Modify an objected nested within an object:
  while structures can quickly become complex, we can still use the same notations to access the information we need:
    nestedObject.data.onlineStatus.busy = 10;
    
Access property names with bracket notation:
  let inventory = foods[selectedFood];
  bracket notation is very useful because sometimes object properties are not known before runtime or we need to access them in a more dynamic way
  
Use the delete keyword to remove objects properties:
  delete foods.apples;

Check if an object has a property:
  javaScript provides us with two different ways to do this:
    users.hasOwnProperty('Alan');
    'Alan' in users;
    
Iterate through the keys of an object with a for... in statement:
  for (let user in users) {
    console.log(user);
  }
  bracket notation must be used to call a variable property name (i.e. an object nested within an object for example)
  
Generate an array of all object keys with Object.keys():
  Object.keys(object);
  this will return an array with strings representing each property in the object
