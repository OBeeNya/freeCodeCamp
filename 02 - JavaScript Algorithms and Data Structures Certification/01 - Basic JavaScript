*** BASIC JAVASCRIPT ***

Comment JavaScript code:
  // commenting on one line
  /* */ multi-line commenting
  
Declaring variables:
  var nameOfVariable ;
  
Storing value with the assignment operator:
  varName = x ;
    
Assigning the value of one variable to another:
  varName1 = VarName2 ;
  
Initializing variables with the assignment operator:
  var varName = x ;
  
Uninitialiazed variables:
  initial value is undefined
  mathematical operation on undefined variable results in NaN (Not a Number)
  
Case sensitivity in variables:
  var someVar != var SomeVar
  best practice: first word in lowercase then uppercase for first letter of following words: someVarName
  
Add two numbers with javascript:
  var varName = x + y;
  
Substract one number from another with javascript:
  var varName = x - y ;
  
Multiply two numbers with javascript:
  var varName = x * y ;
  
Divide one number by another with javacsript:
  var varName = x / y ;
  
Increment a number with javascript:
  varName++;
  
Decrement a number with javascript:
  varName--;
  
Create decimal numbers (floats) with javascript:
  var varName = x.y ;
  
Multiply two decimals with javascript:
  var varName = w.x * y.z ;
  
Divide one decimal by another with javascript:
  var varName = w.x / y.z ;
  
Findind a remainder with javascript:
  var varName = x % y ;
  
Compound assignments with augmented addition:
  varName += x ;
  
Compound assignments with augmented substraction:
  varName -= x;
  
Compound assignements with augmented multiplication:
  varName *= x;
  
Compound assignments with augmented division:
  varName /= x ;
  
Declare string variables:
  var varName = "string" ;
  
Escaping literal quotes in strings:
  type \" instead of just "
  
Quoting strings with single quotes:
  string values may be written with single or double quotes
  you might want to use one type of quote over the other if you want to use both in an string
  
Escape sequences in strings:
  \' single quote
  \" double quote
  \\ backlash
  \n newline
  \r carriage return
  \t tab
  \b word boundary
  \f form feed
  
Concatenating strings with plus operator:
  "string 1 " + "string 2" = "string 1 string 2"
  
Concatenating strings with the plus equals operator:
  var varName = "string1" ;
  varName += "string2" ;
  
Constructing strings with variables:
  var varName1 = "string1" + varName2 + "string2" ;
  
Appending variables to strings:
  var varName1 = "string1" ;
  var varName2 = "string2" ;
  varName2 += varName1 ;
  
Find the length of a string:
  varName = "string".length ;
  
Use bracket notation to find the first character in a string:
  var firstLetter = varWord[0] ;
  
Understand string immutability:
  it's not possible to change one letter from a string as such varWord[0]="x" ;

Use bracket notation to find the Nth character in a string:
  var nthLetterOfWord = word[n-1] ;
  
Use bracket notation to find the last character in a string:
  var lastLetter = word[word.length-1] ;
  
Use bracket notation to find the nth-to-last character in a string:
  var letter = word[word.length-n] ;

Store multiple values in one variable using javascript arrays:
  var varName = [ value1, value2, value3 ] ;
  
Nest one array within another array:
  [ [value1, value2], [value3, value4] ] ;
  
Access array data with indexes:
  var varName = [value1, value2, value3] ;
  varName[1] is equal to value2
  
Modify array data with indexes:
  varName[n] = x ;
  
Access multi-dimensional arrays with indexes:
  var array = [ [1,2,3],
                [4,5,6],
                [7,8,9],
                [[10,11,12],13,14]
                ] ;
  array[3][0][1] is equal to 11
  
Manipulate arrays with push:
  var array=[1,2];
  array.push(3);
  => array equals to [1,2,3];
  
Manipulate arrays with pop:
  used to "pop" a value off of the end of an array
  this popped off value is assigned to a variable
  var popper = array.pop() ;
  
Manipulate arrays with shift:
  removes the first element instead of the last
  var poper = array.shift();
  
Manipulate arrays with unshift:
  add elements in front of the array
  array.unshift(value);
  
Write reusable javascript with functions:
  create the function:    
    function functionName () {
      ...
    }
  call the function:
    functionName();
    
Passing values to functions with arguments:
  function functionName ( param1, param2 ) {
    ...
  }
  
Global scope and functions:
  variables which are defined outside of a function black have a global scope
  variables declared without the var keyword are automatically global => don't do it
  
Local scope and functions:
  variables declared within a function are only visible within that function
  
Global vs local scope in functions:
  it is possible to have global and local variables with the same name
  local variables take precedence over global
  
Return a value from a function with return:
  use a return statement to send a value back out of a function
  function functionName (param) {
    return param * operation ;
  }
  
Understanding undefined value returned from a function:
  a function that doesn't have a return statement returns an undefined value
  it can still have an impact on global variables
  
Assignment with a returned value:
  var = function (param1, param2) ;
  
Stand in line:
  a queue is an abstract data structure where items are kept in order
  new items are added at the back and old items are taken off from the front
  function nextInLine (array, item) {
    array.push(item);
    item=array[0];
    array.shift();
    return item;
  }

Understanding boolean values:
  may only be one of two values: true or false
  boolean values are never written with quotes
  true = 1
  false = 0
  
Use conditional logic with if statements:
  if ( condition is true ) {
    statements ;
  }
  
Comparison with the equality operator:
  if ( var == x )
  can compare different data types:
    3 == '3'      // true
  
Comparison with the strict equality operator:
  does not compare different data types
  
Determine the type of a value/variable:
  typeof var
  
Comparison with the inequality operator:
  3 != 3          // false
  
Comparison with the strict inequality operator:
  !==
  do not convert data types
  
Comparison with the greater than operator:
  >
  convert data types
  
Comparison with the greater than or equal to operator:
  >=
  convert data types
  
Comparison with the less than operator:
  <
  convert data types
  
Comparison with the less than or equal to operator:
  <=
  convert data types
  
Comparisons with the logical and operator:
  &&
  
Comparisons with the logical or operator:
  ||
  
Introducing else statements:
   if (condition) {
    statements ;
   }
   else {
    statements ;
   }

Introducing else is statements:
  if (condition) {
    statements ;
  }
  else if (condition) {
    statements ;
  }
  else {
    statements ;
  }
  
Logical order in if else statements:
  a function is executed from top to bottom
  
Chaining else if statements:
  if (condition1) {
    statement1
  }
  else if (condition2) {
    statement2
  }
  else if (condition3) {
    statement3
  }
  else {
    statementN
  }

Selecting from many options with switch statements:
  switch(var){
    case 1:
      statements;
      break;
    case 2:
      statements;
      break;
  }
  switch values are tested with strict equality (===)
  
  
