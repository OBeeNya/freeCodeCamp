*** OBJECT ORIENTED PROGRAMMING ***

In OOP, objects and classes are used to organize code to describe things and what they can do

Create a basic javascript object:
  let dog = {
    name: "doggie",
    numLegs: 4
  };
  
Use dot notation to access the properties of an object:
  console.log(dog.name);
  
Create a method on an object:
  objects can have a special type of property, called a method
  method are properties that are functions
  let dog = {
    name: "doggie",
    sayName: function(){return "woof woof "+dog.name;}
  };

Make code more reusable with the this keyword:
  in the current context, this refers to the object that the method is associated with
  if the object's name is changed, it is not necessary to find all its references in the code
  sayName: function(){return "woof woof "+this.name;}
  
Define a constructor function:
  constructors are functions that create new objects
  function Bird() {
    this.name = "Albert";
    this.color = "blue";
    this.numLegs = 2;
  }
  constructors are defined with a capitalized name to distinguish them from other functions
  constructors use the keyword this to set properties of the object they will create
  constructors define properties and behaviors instead of returning a value as other functions might
  
Use a constructor to create an object:
  let blueBird = new Bird();              // notice the use of the new operator
  
Extend constructors to receive arguments:
  function Bird (name, color) {
    this.name=name;
    this.color=color;
    this.numLegs=4;
  }
  let newBird = new Bird("Bruce", "red");
  
Verify an object's constructor with instanceOf:
  
