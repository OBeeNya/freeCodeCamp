*** OBJECT ORIENTED PROGRAMMING ***

In OOP, objects and classes are used to organize code to describe things and what they can do

Create a basic javascript object:
  let dog = {
    name: "doggie",
    numLegs: 4
  };
  
Use dot notation to access the properties of an object:
  console.log(dog.name);
  
Create a method on an object:
  objects can have a special type of property, called a method
  method are properties that are functions
  let dog = {
    name: "doggie",
    sayName: function(){return "woof woof "+dog.name;}
  };

Make code more reusable with the this keyword:
  in the current context, this refers to the object that the method is associated with
  if the object's name is changed, it is not necessary to find all its references in the code
  sayName: function(){return "woof woof "+this.name;}
  
Define a constructor function:
  constructors are functions that create new objects
  function Bird() {
    this.name = "Albert";
    this.color = "blue";
    this.numLegs = 2;
  }
  constructors are defined with a capitalized name to distinguish them from other functions
  constructors use the keyword this to set properties of the object they will create
  constructors define properties and behaviors instead of returning a value as other functions might
  
Use a constructor to create an object:
  let blueBird = new Bird();              // notice the use of the new operator
  
Extend constructors to receive arguments:
  function Bird (name, color) {
    this.name=name;
    this.color=color;
    this.numLegs=4;
  }
  let newBird = new Bird("Bruce", "red");
  
Verify an object's constructor with instanceOf:
  anytime a constructor function creates a new object, that object is said to be an instance of its constructor
  instanceof allows you to compare an object to a constructor, returning true or false based on whether or not that object was created with the constructor
  instanceName instanceof ConstructorName;          // returns true or false
  
Understand own properties:
  own properties are defined as such because they are defined directly on the instance object
 
Use prototype properties to reduce duplicate code:
  if a property will always be the same for each instance, properties in prototype are shared among all of them
  ContructorName.prototype.popertyName = x ;
  
Iterate over all properties:
  for (property in duck){
    if (duck.hasOwnProperty(property)){
      ownProp.push(property);
    }
    else {
      protoProp.push(property);
    }
  }
  
Understand the constructor property:
  instanceName.constructor === ConstructorName ;        // returns true if the constructor created that instance
  
Change the prototype to a new object:
  efficient way to set the prototype t a new object that aleady contains the properties:
    Bird.prototype = {
      numLegs: 2,
      eat: function() {
        console.log("nom nom nom");
      }
    }
    
Remember to set the constructor property when changing the prototype:
  manually setting up a prototype (as per previous step) erases the constructor property of the instance
  to fix this, define the constructor property whenever manually setting a new prototype
  Bird.prototype = {
    constructor: Bird,
    numLegs: 2,
    eat: function() {
      console.log("nom nom nom");
    }
  }
  
Understand where an object's prototype comes from:
  Bird.prototype.isPrototypeOf(duck);           // returns true
  
Understand the prototype chain:
  all objects have a prototype
  an object's prototype is also an object
  therefore an object's prototype can have its own prototype
  Object.prototype is the prototype of custom Constructor.prototype
  hasOwnProperty method is defined in Object.prototype
  Object.prototype is a supertype for Bird and duck
  duck is a subtype for Bird and Object.prototype
  
Use inheritance so you don't repeat yourself:
  principle in programming called Don't Repeat Yourself (DRY)
  if for example a method is shared by objects of different prototypes, you can create a supertype including that method
  
Inherit behaviors from a supertype:
  let duck = Object.create(Animal.prototype);
  
Set the child's prototype to an instance of the parent:
  Bird.prototype = Object.Create(Animal.prototype);
  
Reset an inherited constructor property:
  when an object inherits its prototype from another object, it also inherits the supertype's constructor property
  you can manually set Bird's constructor property to the Bird object
  function Animal() { }
  function Bird() { }
  Bird.prototype = Object.create(Animal.prototype);
  let duck = new Bird();
  duck.constructor=Bird;
  
Add methods after inheritance:
  
