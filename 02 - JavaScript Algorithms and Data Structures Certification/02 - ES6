*** ES6 ***

Explore differences between the var and let keywords:
  unlike var, when using let, a variable with the same name can only be declared once
  let varName = "cat";
  let varName = "dog";      // returns an error
  
Compare scopes of the var and let keywords:
  a var keyword is declared globally or locally if declared in a function
  if you declare a variable with the let keyword inside a block, statement or expression, its scope is limited to it
  
Declare a read-only variable with the const keyword:
  const has all the features of let + it is in read-only
  once a variable is assigned with const, it cannot be reassigned
  a common practice when declaring a constant variable is to use all uppercase letters
  
Mutate an array declared with const:
  objects to a variable using const are still mutable
  it only prevents reassignment of the variable identifier
  const array = [ 1, 2, 3 ];
  array = [ 1, 3, 3 ];          // returns an error
  array[1]=3;                   // does not return an error
  
Prevent object mutation:
  Object.freeze(object);
  you can no longer add, update or delete properties

Use arrow functions to write concise anonymous functions:
  we often don't need to name our functions, especially when passing a function as an argument to an other function
  we create inline functions
  we don't need to name these functions because we do not reuse them anywhere else
  instead of:
    const myFunc = function() {
      const myVar = "value" ;
      return myVar ;
    }
  we say:
    const myFunc = () => "value" ;
    
Write arrow function with parameters:
  const myFunc = (param1, param2) => statement ;        // parentheses can be omitted if only one parameter
  
Set default parameters for your function:
  const myFunc = ( param1 = default value ) => statement ;
  
Use the rest parameters with function parameters:
  you can create functions that take a variable number of arguments
  function myFunc ( ...args )
  
Use the spread operator to evaluate arrays in-place:
  (...arr) returns an unpacked / spread array
  
Use destructuring assignment to extract values from objects:
  const object = { param1: "value1", param2: "value2" }
  const { param1, param2 } = object ;         // creates a variable and assign the value of the corresponding parameter of the object
  
Use destructuring assignment to assign variables from objects:
  you can also assign the value of a parameter of an object to a variable with a new name
  const { param1: newName1, param2: newName2 } = object ;
  
Use destructuring assignment to assign variables from nested objects:
  const { paramParent: { paramChild } } = object ;        // variable with same name as paramChild
  const { paramParent { paramChild: newName } } = object ;
  
