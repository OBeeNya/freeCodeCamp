*** INTERMEDIATE ALGORITHM SCRIPTING ***

Sum all numbers in a range:
  function sumAll(arr) {
    var sortedArr=arr.sort(function(a,b){
      return a-b;
    });
    var result=0;
    var newArr=sortedArr.slice();
    for(let i=0;i<(sortedArr[1]-sortedArr[0]-1);i++){
      newArr.splice(i+1,0,newArr[i]+1)
    }
    for(let i=0;i<newArr.length;i++){
      result+=newArr[i];
    }
    return result;
  }
  
Diff two arrays:
  function diffArray(arr1, arr2) {
    var resultArr=[];
      for(let i=0;i<arr1.length;i++){
        if(arr2.indexOf(arr1[i])==-1){
          resultArr.push(arr1[i]);
        }
      }
      for(let i=0;i<arr2.length;i++){
        if(arr1.indexOf(arr2[i])==-1){
          resultArr.push(arr2[i])
        }
      }
      return resultArr;
  }
  
Seek and destroy:
  function destroyer(arr, ...arg) {
    var resultArr=arr.slice('');
      arg.forEach(arg=>{
        if(resultArr.indexOf(arg)!=-1){
          resultArr.splice(resultArr.indexOf(arg),1)
      }
        if(resultArr.indexOf(arg)!=-1){
          resultArr.splice(resultArr.indexOf(arg),1)
      }
    })
    return resultArr;
  }
  
Wherefore art thou:
  function whatIsInAName(collection, source) {
    var arr = [];
    var sourceKeys=Object.keys(source);
    for(let i=0;i<collection.length;i++){
      var nbKeys=0;
      for(let j=0;j<sourceKeys.length;j++){
        if(collection[i][sourceKeys[j]]==source[sourceKeys[j]]){
          nbKeys++;
        }
        if(nbKeys==sourceKeys.length){
          arr.push(collection[i]);
        }
      }
    }
    return arr;
  }
  
Spinal tap case:
  function spinalCase(str) {
    var string =str;
    string=string.trim()
      .split(/(?=[A-Z])|\s|_/)
      .join('-')
      .toLowerCase();
    console.log(string);
    return string;
  }
  
Pig latin:
  function translatePigLatin(str) {
    var string=str.split('');
    var vowels=['a','e','i','o','u'];
    if(vowels.indexOf(string[0])!=-1){
      string.push('way');
    }
    else if(str.match(/[aeiou]/)==null){
      string.push('ay');
    }
    else{
      var clust=str.match(/^[zrtypqsdfghjklmwxcvbn]+/g);
      var clustLength=clust[0].length;
      clust.join('')
      string.push(clust);
      string.splice(0,clustLength);
      string.push('ay');
    }
    string=string.join('');
    return string;
  }
  
Search and replace:
  function myReplace(str, before, after) {
    var string=str.split('')
    var aftStr=after.split('');
    if(before.match(/^[A-Z]/)!=null){
      aftStr[0]=aftStr[0].toUpperCase(); 
    }
    else{
      aftStr[0]=aftStr[0].toLowerCase();
    };
    aftStr=aftStr.join('');
    string.splice(str.match(before).index,before.length);
    string.splice(str.match(before).index,0,aftStr);
    return string.join('');
  }
  
DNA pairing:
  function pairElement(str) {
    var string=str.split('');
    var stringResult=[];
    for(let i=0;i<string.length;i++){
      if(string[i]=='A'){
        stringResult.push(["A","T"]);
      }
      else if(string[i]=='T'){
        stringResult.push(["T","A"]);
      }
      else if(string[i]=='C'){
        stringResult.push(["C","G"]);
      }
      else if(string[i]=='G'){
        stringResult.push(["G","C"]);
      }
    }
    return stringResult;
  }
  
Missing letters:
  function fearNotLetter(str) {
    var string=str.split('');
    var alphabet='abcdefghijklmnopqrstuvwxyz';
    if(alphabet.indexOf(string[string.length-1])-alphabet.indexOf(string[0])+1!=string.length){
      for(let i=1;i<string.length;i++){
        if(alphabet.indexOf(string[i])!=alphabet.indexOf(string[i-1])+1){
          return alphabet[i+alphabet.indexOf(string[0])];
        }
      }
    }
  }
  
Sorted union:
  function uniteUnique(...arr) {
    var resultArr=[];
    arr.forEach(arr=>{
      for(let i=0;i<arr.length;i++){
        if(resultArr.indexOf(arr[i])==-1){
          resultArr.push(arr[i]);
        }
      }
    })
    return resultArr;
  }
  
Convert HTML entities:
  function convertHTML(str) {
    var resultStr=str.split('');
    for(let i=0;i<resultStr.length;i++){
      switch(resultStr[i]){
        case "&":
        resultStr[i]="&amp;";
        break;
        case "<":
        resultStr[i]="&lt;";
        break;
        case ">":
        resultStr[i]="&gt;";
        break;
        case '"':
        resultStr[i]="&quot;";
        break;
        case "'":
        resultStr[i]="&apos;";
        break;
      }
    }
    resultStr=resultStr.join('');
    return resultStr;
  }
  
Sum all odd Fibonacci numbers:
  function sumFibs(num) {
    var result=0;
    var fib=1;
    var fibNumbers=[1];
    for(let i=0;fibNumbers[i]<=num;i++){
      fibNumbers.push(fib);
      fib=fib+fibNumbers[i];
      if(fibNumbers[i]%2!=0){
        result=result+fibNumbers[i];
      }
    }
    return result;
  }
  
Sum all primes:
  function sumPrimes(num) {
    var result=0;
    var arr=[];
    for(let i=0;i<num;i++){
      arr[i]=i+1;
    }
    arr[0]=0;
    for(let i=1;i<=arr.length;i++){
      for(let j=1;j<i;j++){
        if(arr[i]%arr[j]==0){
          arr.splice(i,1,0)
        }
      }
    }
    for(let i=0;i<arr.length;i++){
      result=result+arr[i];
    }
    return result;
  }
  
Smallest common multiple:
  ***************************************************
  
Drop it:
  function dropElements(arr, func) {
    var array=[];
    var index=0;
    while(func(arr[index])==false){
      index++;
    }
    array=arr.slice(index,arr.length);
    return array;
  }

Steamroller:
  ***************************************************

Binary agents:
  ***************************************************
  
Everything be true:
  function truthCheck(collection, pre) {
    for(let i=0;i<collection.length;i++){
      if(collection[i].hasOwnProperty(pre)==false|collection[i][pre]==false|collection[i][pre]==0|collection[i][pre]==undefined|Object.is(collection[i][pre], NaN)){
        return false;
      }
    }
    return true;
  }
  
Arguments optional:
   *************************************************** 

Make a person:
  var Person = function(firstAndLast) {
    this.getFirstName = function(){
      var fullName=firstAndLast.split(' ');
      return fullName[0];
    };
    this.getLastName=function(){
      var fullName=firstAndLast.split(' ');
      return fullName[1];
    }
    this.getFullName = function() {
      return firstAndLast;
    };
    this.setFirstName = function(x){
      var fullName=firstAndLast.split(' ');
      fullName[0]=x;
      firstAndLast=fullName.join(' ');
    }
    this.setLastName = function(x){
      var fullName=firstAndLast.split(' ');
      fullName[1]=x;
      firstAndLast=fullName.join(' ');
    }
    this.setFullName = function(x){
      var fullName=firstAndLast.split(' ');
      var temp=x.split(' ');
      fullName[0]=temp[0];
      fullName[1]=temp[1];
      firstAndLast=fullName.join(' ');
    }
    return firstAndLast;
  };

Map the debris:
  
